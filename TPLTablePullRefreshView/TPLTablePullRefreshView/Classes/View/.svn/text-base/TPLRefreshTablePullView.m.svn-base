//
//  TPLRefreshTableView.m
//  GoDataing_LYBT
//
//  Created by NB_TPL on 14-4-14.
//  Copyright (c) 2014年 艾广华. All rights reserved.
//

#import "TPLRefreshTablePullView.h"
#define TEXT_COLOR	 [UIColor colorWithRed:87.0/255.0 green:108.0/255.0 blue:137.0/255.0 alpha:1.0]
#define FLIP_ANIMATION_DURATION 0.18f


@interface TPLRefreshTablePullView (Private)
{
    
}
- (void)setState:(TPLPullRefreshState)aState;
@end
@interface TPLRefreshTablePullView ()
{
    CGFloat _transHeight;
}
- (void)setState:(TPLPullRefreshState)aState;
@end


@implementation TPLRefreshTablePullView

@synthesize delegate=_delegate , viewStyle = _viewStyle;


- (id)initWithFrame:(CGRect)frame arrowImageName:(NSString *)arrow textColor:(UIColor *)textColor viewStyle:(TPLPullRefreshViewStyle)viewStyle {
    if((self = [super initWithFrame:frame])) {
        
        
        _imageArray = [TPLHelpTool imageArrayFromGifFile:[[NSBundle mainBundle] pathForResource:@"logo" ofType:@"gif"]];
        _transHeight = 65.0f/_imageArray.count;
        
        
        _viewStyle = viewStyle;
        _contentInsets = UIEdgeInsetsZero;
        self.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        //self.backgroundColor = [UIColor colorWithRed:226.0/255.0 green:231.0/255.0 blue:237.0/255.0 alpha:1.0];
        self.backgroundColor = [UIColor whiteColor];
        UILabel *lastUpdateLabelabel;
        UILabel * statusLabel;
        CALayer *layer = [CALayer layer];
        UIActivityIndicatorView *view = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
        UIImage * arrowImage = (UIImage*)_imageArray.firstObject;
        if (viewStyle == TPLPullRefreshViewStyleHeader)
        {
            
            lastUpdateLabelabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, frame.size.height - 30.0f, self.frame.size.width, 20.0f)];
            statusLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, frame.size.height - 48.0f, self.frame.size.width, 20.0f)];
            layer.frame = CGRectMake(25.0f, frame.size.height - 60.0f, 54.0f, 54.0f);
            view.frame = CGRectMake(25.0f, frame.size.height - 38.0f, 20.0f, 20.0f);
        }
        else if (viewStyle == TPLPullRefreshViewStyleFooter)
        {
            lastUpdateLabelabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, 30.0f, self.frame.size.width, 20.0f)];
            statusLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, 15.0f, self.frame.size.width, 20.0f)];
            
            layer.frame = CGRectMake(25.0f, 0.0f, 54.0f, 54.0f);
            view.frame = CGRectMake(25.0f, 32.0f, 20.0f, 20.0f);
            
            //            arrowImage = [self rotationImage:arrowImage withAngle:-2*M_PI];
        }
        
        lastUpdateLabelabel.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        lastUpdateLabelabel.font = [UIFont systemFontOfSize:12.0f];
        lastUpdateLabelabel.textColor = textColor;
        lastUpdateLabelabel.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
        lastUpdateLabelabel.shadowOffset = CGSizeMake(0.0f, 1.0f);
        lastUpdateLabelabel.backgroundColor = [UIColor clearColor];
        lastUpdateLabelabel.textAlignment = NSTextAlignmentCenter;
        [self addSubview:lastUpdateLabelabel];
        _lastUpdatedLabel=lastUpdateLabelabel;
        
        
        statusLabel.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        statusLabel.font = [UIFont boldSystemFontOfSize:13.0f];
        statusLabel.textColor = textColor;
        statusLabel.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
        statusLabel.shadowOffset = CGSizeMake(0.0f, 1.0f);
        statusLabel.backgroundColor = [UIColor clearColor];
        statusLabel.textAlignment = NSTextAlignmentCenter;
        [self addSubview:statusLabel];
        _statusLabel=statusLabel;
        
        
        layer.contentsGravity = kCAGravityResizeAspect;
        layer.contents = (id)arrowImage.CGImage;
        
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 40000
        if ([[UIScreen mainScreen] respondsToSelector:@selector(scale)]) {
            layer.contentsScale = [[UIScreen mainScreen] scale];
        }
#endif
        
        
        
        [[self layer] addSublayer:layer];
        _arrowImage=layer;
        
        [self addSubview:view];
        _activityView = view;
        
        
        [self setState:TPLPullRefreshNormal];
    }
    
    return self;
    
}

- (id)initWithFrame:(CGRect)frame  {
    return [self initWithFrame:frame arrowImageName:@"blueArrow.png" textColor:TEXT_COLOR viewStyle:TPLPullRefreshViewStyleHeader];
}

-(id)initWithFrame:(CGRect)frame viewStyle:(TPLPullRefreshViewStyle)viewStyle
{
    return [self initWithFrame:frame arrowImageName:@"blueArrow.png" textColor:TEXT_COLOR viewStyle:viewStyle];
}

#pragma mark -
#pragma mark Setters

- (void)refreshHeaderLastUpdatedDate {
    
    if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDataSourceLastUpdated:)]) {
        
        NSDate *date = [_delegate tplRefreshTablePullViewDataSourceLastUpdated:self];
        
        [NSDateFormatter setDefaultFormatterBehavior:NSDateFormatterBehaviorDefault];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateStyle:NSDateFormatterShortStyle];
        [dateFormatter setTimeStyle:NSDateFormatterShortStyle];
        
        _lastUpdatedLabel.text = [NSString stringWithFormat:@"最后更新: %@", [dateFormatter stringFromDate:date]];
        [[NSUserDefaults standardUserDefaults] setObject:_lastUpdatedLabel.text forKey:@"EGORefreshTableView_LastRefresh"];
        [[NSUserDefaults standardUserDefaults] synchronize];
        
    } else {
        
        _lastUpdatedLabel.text = nil;
        
    }
    
}
- (void)refreshFooterLastUpdatedDate {
    
    if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDataSourceLastUpdated:)]) {
        
        NSDate *date = [_delegate tplRefreshTablePullViewDataSourceLastUpdated:self];
        
        [NSDateFormatter setDefaultFormatterBehavior:NSDateFormatterBehaviorDefault];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateStyle:NSDateFormatterShortStyle];
        [dateFormatter setTimeStyle:NSDateFormatterShortStyle];
        
        _lastUpdatedLabel.text = [NSString stringWithFormat:@"最后更新: %@", [dateFormatter stringFromDate:date]];
        [[NSUserDefaults standardUserDefaults] setObject:_lastUpdatedLabel.text forKey:@"EGORefreshTableView_LastRefresh"];
        [[NSUserDefaults standardUserDefaults] synchronize];
        
    } else {
        
        _lastUpdatedLabel.text = nil;
        
    }
    
}


- (void)setState:(TPLPullRefreshState)aState{
    
    switch (aState) {
        case TPLPullRefreshPulling:
            if (_viewStyle == TPLPullRefreshViewStyleHeader)
            {
                _statusLabel.text = NSLocalizedString(@"松手刷新...", @"松手刷新状态");
            }
            else if(_viewStyle == TPLPullRefreshViewStyleFooter)
            {
                _statusLabel.text = NSLocalizedString(@"松手追加...", @"松手刷新状态");
            }
            //			[CATransaction begin];
            //			[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
            //			_arrowImage.transform = CATransform3DMakeRotation((M_PI / 180.0) * 180.0f, 0.0f, 0.0f, 1.0f);
            //			[CATransaction commit];
            
            break;
        case TPLPullRefreshNormal:
            
            if (_state == TPLPullRefreshPulling) {
                //				[CATransaction begin];
                //				[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
                //				_arrowImage.transform = CATransform3DIdentity;
                //				[CATransaction commit];
            }
            if (_viewStyle == TPLPullRefreshViewStyleHeader)
            {
                _statusLabel.text = NSLocalizedString(@"下拉刷新...", @"下拉刷新状态");
                [self refreshHeaderLastUpdatedDate];
            }
            else if(_viewStyle == TPLPullRefreshViewStyleFooter)
            {
                _statusLabel.text = NSLocalizedString(@"上拉加载...", @"下拉刷新状态");
                [self refreshFooterLastUpdatedDate];
            }
            [_activityView stopAnimating];
            //			[CATransaction begin];
            //			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions];
            _arrowImage.hidden = NO;
            //			_arrowImage.transform = CATransform3DIdentity;
            //			[CATransaction commit];
            
            
            break;
        case TPLPullRefreshLoading:
            
            _statusLabel.text = NSLocalizedString(@"加载中...", @"加载状态");
            [_activityView startAnimating];
            //			[CATransaction begin];
            //			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions];
            _arrowImage.hidden = YES;
            //			[CATransaction commit];
            
            break;
        default:
            break;
    }
    
    _state = aState;
}


#pragma mark -
#pragma mark ScrollView Methods

- (void)tplRefreshScrollViewDidScroll:(UIScrollView *)scrollView {
    //只针对下拉
    if (scrollView.contentOffset.y < 0)
    {
        int i = abs((int)scrollView.contentOffset.y)/_transHeight;
        //        NSLog(@"i = %d",i);
        i = i >= _imageArray.count ? (int)_imageArray.count - 1 : i;
        _arrowImage.contents = (id)[(UIImage*)[_imageArray objectAtIndex:i] CGImage];
    }
    
    
    if (_state == TPLPullRefreshLoading)
    {
        if (_viewStyle == TPLPullRefreshViewStyleHeader)
        {
            CGFloat offset = MAX(scrollView.contentOffset.y * -1, 0);
            offset = MIN(offset, 60);
            scrollView.contentInset = UIEdgeInsetsMake(offset, 0.0f, 0.0f, 0.0f);
        }
        else if(_viewStyle == TPLPullRefreshViewStyleFooter)
        {
            CGFloat offset = MAX(scrollView.contentOffset.y + scrollView.frame.size.height -scrollView.contentSize.height, 60);
            offset = MIN(offset, 60);
            scrollView.contentInset = UIEdgeInsetsMake(0.0f, 0.0f, offset, 0.0f);
        }
        
    } else if (scrollView.isDragging)
    {
        
        BOOL _loading = NO;
        if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDataSourceIsLoading:)])
        {
            _loading = [_delegate tplRefreshTablePullViewDataSourceIsLoading:self];
        }
        
        if (_viewStyle == TPLPullRefreshViewStyleFooter)
        {
            //            NSLog(@"y = %f",scrollView.contentOffset.y);
            //            NSLog(@"size = %f",scrollView.frame.size.height);
            //            NSLog(@"content SIze = %f",self.frame.origin.y);
            //            NSLog(@"value = %f",(scrollView.contentOffset.y + scrollView.frame.size.height) - scrollView.contentSize.height);
            if(_state == TPLPullRefreshPulling && (scrollView.contentOffset.y + scrollView.frame.size.height) - self.frame.origin.y < 65.0f  && scrollView.contentOffset.y > 0.0f && !_loading)//上拉加载
            {
                [self setState:TPLPullRefreshNormal];
            }
            else if (_state == TPLPullRefreshNormal && (scrollView.contentOffset.y + scrollView.frame.size.height) - self.frame.origin.y > 65.0f && !_loading)
            {
                [self setState:TPLPullRefreshPulling];
            }
        }
        else
        {
            if (_state == TPLPullRefreshPulling && scrollView.contentOffset.y > -65.0f && scrollView.contentOffset.y < 0.0f && !_loading)
            {
                [self setState:TPLPullRefreshNormal];
            }
            else if (_state == TPLPullRefreshNormal && scrollView.contentOffset.y < -65.0f && !_loading)
            {
                [self setState:TPLPullRefreshPulling];
            }
        }
        
        if (scrollView.contentInset.top != 0) {
            scrollView.contentInset = _contentInsets;
        }
        
    }
    
}

- (void)tplRefreshScrollViewDidEndDragging:(UIScrollView *)scrollView {
    
    BOOL _loading = NO;
    if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDataSourceIsLoading:)]) {
        _loading = [_delegate tplRefreshTablePullViewDataSourceIsLoading:self];
    }
    if (_viewStyle == TPLPullRefreshViewStyleHeader)
    {
        if (scrollView.contentOffset.y <= - 65.0f && !_loading && _viewStyle == TPLPullRefreshViewStyleHeader) {
            
            if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDidTriggerRefresh:)]) {
                [(id)_delegate tplRefreshTablePullViewDidTriggerRefresh:self];
            }
            
            [self setState:TPLPullRefreshLoading];
            [UIView beginAnimations:nil context:NULL];
            [UIView setAnimationDuration:0.2];
            scrollView.contentInset = UIEdgeInsetsMake(60.0f, 0.0f, 0.0f, 0.0f);
            [UIView commitAnimations];
        }
    }
    else if (_viewStyle == TPLPullRefreshViewStyleFooter)
    {
        if ((scrollView.contentOffset.y + scrollView.frame.size.height) - self.frame.origin.y > 65.0f && !_loading)
        {
            
            if ([(id)_delegate respondsToSelector:@selector(tplRefreshTablePullViewDidTriggerRefresh:)]) {
                [(id)_delegate tplRefreshTablePullViewDidTriggerRefresh:self];
            }
            
            [self setState:TPLPullRefreshLoading];
            [UIView beginAnimations:nil context:NULL];
            [UIView setAnimationDuration:0.2];
            scrollView.contentInset = UIEdgeInsetsMake(0.0f, 0.0f, 60.0f, 0.0f);
            [UIView commitAnimations];
            
        }
        
    }
}


- (void)tplRefreshScrollViewDataSourceDidFinishedLoading:(UIScrollView *)scrollView
{
    [self tplRefreshScrollViewDataSourceDidFinishedLoading:scrollView withContentInset:UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f)];
}
- (void)tplRefreshScrollViewDataSourceDidFinishedLoading:(UIScrollView *)scrollView withContentInset :(UIEdgeInsets)contentInset;
{
    NSLog(@"viewStyle = %d",_viewStyle);
    [self setState:TPLPullRefreshNormal];
    
    [UIView beginAnimations:nil context:NULL];
    [UIView setAnimationDuration:.3];
    [scrollView setContentInset:contentInset];
    [UIView commitAnimations];
}


#pragma mark
#pragma mark           help Function
#pragma mark
-(UIImage*)rotationImage:(UIImage*)image withAngle:(CGFloat)angle
{
    CGSize size = image.size;
    UIGraphicsBeginImageContext(size);
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    CGContextRotateCTM(ctx, angle);
    CGContextDrawImage(UIGraphicsGetCurrentContext(), CGRectMake(0,0,size.width, size.height), image.CGImage);
    UIImage *resultImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return resultImage;
}

#pragma mark -
#pragma mark Dealloc

- (void)dealloc {
    
    _delegate=nil;
    _activityView = nil;
    _statusLabel = nil;
    _arrowImage = nil;
    _lastUpdatedLabel = nil;
}


@end
